apply plugin:'java'

/**
 * Сборщик: Groovy, Java, Idea forms (Extract need jar's)
 */

/**=================================*/
//archivesBaseName = 'FerryWork'
//version = ''
//group = 'com.phpusr.ferrywork'
//project.buildDir = 'out'

sourceCompatibility = '1.6'
targetCompatibility = '1.6'
def mainClassName = 'cmdgui.run.Main'
def mainSrcDir = "${projectDir}/src/main"
//def resourcesDir = "${projectDir}/src/resources"
def manifestFile = "${mainSrcDir}/META-INF/MANIFEST.MF"
//def jarDir = "${projectDir}/release"
/**=================================*/

configurations {
    javac2
}

repositories {
    //flatDir dirs: "${rootDir}/lib"
    mavenCentral()
    ivy {
        artifactPattern "http://www.nurflugel.com/Home/repository/[organisation]/[module]/[revision]/[artifact]-[revision].[type]"
        ivyPattern      "http://www.nurflugel.com/Home/repository/[organisation]/[module]/[revision]/[artifact]-[revision].ivy.xml"
    }
}

dependencies {
    javac2 'com.intellij:javac2:11.0.3',
            'asm:asm-all:3.3.1',
            'org.jdom:jdom:1.1'

    compile 'com.intellij:forms_rt:12.0'
    testCompile "junit:junit:4.11"
}


sourceSets {
    main {
        java { srcDirs = [] }
        resources {
            //srcDir resourcesDir
        }
    }
}

jar {
    manifest {
        from manifestFile
        /*attributes(
            'Class-Path': "groovy-all-${groovyVer}.jar forms_rt.jar",
            'Main-Class': 'test.MainJava'
        )*/
    }

    def printRuntimaCP = true
    if (printRuntimaCP) println '>>Runtime Classpath:'
    configurations.runtime.asPath.tokenize(';').each { jarFile ->
        if (printRuntimaCP) println "\t${jarFile}"
        from zipTree(jarFile)
    }

    //destinationDir file(jarDir)
}

task compileJava(overwrite: true) {

    def theDir = file("${project.buildDir.path}/classes/main")
    //make any source dirs needed for the output
    theDir.mkdirs()

    def destDir = "${project.buildDir.path}/classes/main"
    def optimize = 'off'
    def deprecation = 'off'
    def includeAntRuntime = true
    def javaDeprecation = deprecation
    def debugLevel = 'lines,vars,source'
    def debug = 'on'
    def classpath = configurations.compile.asPath

    compileJavac2(mainSrcDir, classpath, destDir, debug, debugLevel, javaDeprecation, includeAntRuntime, optimize, sourceCompatibility, targetCompatibility)
}

private void compileJavac2(mainSrcDir, classpath, destDir, debug, debugLevel, deprecation, includeAntRuntime, optimize, sourceCompatibility, targetCompatibility) {
    ant {
        taskdef(name: 'javac2', classname: 'com.intellij.ant.Javac2', classpath: configurations.javac2.asPath)

        javac2(srcdir: mainSrcDir,
                classpath: classpath,
                destdir: destDir,
                debug: debug,
                debugLevel: debugLevel,
                deprecation: deprecation,
                includeAntRuntime: includeAntRuntime,
                optimize: optimize,
                source: sourceCompatibility,
                target: targetCompatibility,
                encoding: 'UTF-8'
        )
    }
}

// --offline
task run(type: JavaExec, dependsOn: classes) {
    main = mainClassName
    args = []
    classpath sourceSets.main.runtimeClasspath
    //classpath configurations.runtime // Не обязательно
}
